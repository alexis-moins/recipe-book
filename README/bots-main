# Unifox bots

This repository contains the unifox trading bot algorithms.

Dependencies:
- python (version 3.11)
- [just](https://github.com/casey/just)
- [docker](https://www.docker.com)
- [pre-commit](https://github.com/pre-commit/pre-commit)

## üì¶ Installation

### With vanilla python
Once you have cloned the repository:
- Create a virtual environment for python **3.11** using the [venv](https://docs.python.org/3/library/venv.html) module
```bash
python -m venv .venv
```

- Activate the virtual environment (Windows)
```bash
source .venv/Scripts/activate
```

- Activate the virtual environment (Mac)
```bash
source .venv/bin/activate
```

- Install the dependencies
```bash
pip install -r bots/requirements.txt
```

### With poetry (recommended)
Once you have cloned the repository and installed [poetry](https://python-poetry.org/docs/):
- Install the dependencies, poetry will automatically create a virtual environment for you
```bash
poetry install
```

- Activate the environment
```bash
poetry shell
```

## ‚öôÔ∏è  Setup

### Hooks

This repository uses [pre-commit](https://github.com/pre-commit/pre-commit) hooks to automatically run tools like [black](https://github.com/psf/black) when commiting changes. To enable this behaviour, run the following command.

```bash
pre-commit install
```

Optionally, you can manually run the installed hooks by typing:
```bash
pre-commit run
```

### Environment

You must set environment variables in a `.env` file at the root of the project. To do so, copy the local [.env](.env.local) file and optionally change its content.
```bash
cp .env.local .env
```

### Database

Start the docker environment
```bash
docker compose up --detach
```

Create the database
```bash
docker compose exec -t api yarn prisma db push
```

Populate the database
```bash
just populate
```

### Launching the bots

Trading
```bash
python bots/main.py
```

Backtesting
```bash
python bots/backtest.py
```

## üöÄ Workflow

### Adding / removing dependencies (poetry)
To add a dependency using poetry, run
```bash
poetry add <dependency>
```

Similarly, you can remove a dependency by typing
```bash
poetry remove <dependency>
```

### Creating a new bot

First, create a model adapter for your bot in the [adapters](functions/train/adapters) directory. Inside this folder, you must create a class extending the [ModelAdapter](functions/train/adapters/model_adapter.py) interface. You can take inspiration from the existing [prophet adapter](functions/train/adapters/prophet_adapter.py).

Then, register your adapter [here](functions/train/adapters/__init__.py) by importing and adding it to the `ADAPTERS` dictionary. Once that's done, your new bot is ready to trade! Optionally, you can change the frequency of trading by tweaking the `.env` file.
